import Parser from './exercicios10-parser';
import DatabaseError from './exercicios10-databaseerror';

export default class Database {
  constructor() {
    this.tables = {};
    this.parser = new Parser();
  };

  createTable(parsedStatement) {
    let [, tableName, columns] = parsedStatement;
    this.tables[tableName] = {
      columns: {},
      data: []
    }
    columns = columns.split(", ");

    for (let column of columns) {
      column = column.trim().split(" ");
      const [name, type] = column;
      database.tables[tableName].columns[name] = type;
      console.log(name, type);
    }
  }

  insert(parsedStatement) {
    let [, tableName, columns, values] = parsedStatement;
    columns = columns.split(", ");
    values = values.split(", ");
    let row = {};
    for (let i = 0; i < columns.length; i++) {
      const column = columns[i];
      const value = values[i];
      row[column] = value;
    }
    this.tables[tableName].data.push(row);
  }

  select(parsedStatement) {
    let [, columns, tableName, whereClause] = parsedStatement;
    columns = columns.split(", ");
    let rows = this.tables[tableName].data;
    if (whereClause) {
      const [columnWhere, valueWhere] = whereClause.split(" = ");
      rows = rows.filter((row) => {
        return row[columnWhere] === valueWhere;
      })
    }

    rows = rows.map((row) => {
      let selectedRow = {};
      columns.forEach((column) => {
        selectedRow[column] = row[column];
      })
      return selectedRow;
    })
    return rows;
  }

  delete(parsedStatement) {
    let [, tableName, whereClause] = parsedStatement;
    if (whereClause) {
      let [columnWhere, valueWhere] = whereClause.split(" = ");
      this.tables[tableName].data = this.tables[tableName].data.filter((row) => {
        return row[columnWhere] !== valueWhere;
      })
    } else {
      this.tables[tableName].data = [];
    }
  }

  execute(parsedStatement) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        const result = this.parser.parse(statement);
        if (result) {
          resolve(this[result.command](result.parsedStatement));
        }
        const message = `Syntax error: "${statement}"`;
        reject(new DatabaseError(statement, message));
      }, 1000)
    })
  }
};
