# Function
  - Uma função é um objeto que contém um bloco de código executável
    Ex.: 
      function sum(a, b) { (Essa forma de declarar uma função é conhecida como function declaration)
        return a + b;
      };
      console.log(sum(2, 2)); -> 4

      const sum = function(a, b) { (Essa forma de declarar uma função é conhecida como function expression)
        return a + b;
      };
      console.log(sum(2, 2)); -> 4
  - Qual é a diferença entre function declaration e expression?
    - A function declaration pode ser ser invocada antes da declaração e a function expression não permite isso.
  - Na linguagem JavaScript, as funções são de primeira classe, ou seja, podem ser atribuídas a uma variável,
    passadas por parâmetro ou serem retornada de uma outra função
    Ex.: 
      const sum = function(a, b) {
        return a + b;
      }

      const subtract = function(a, b) {
        return a - b;
      }

      const calculator = function(fn) {
        return function(a, b) {
          return fn(a, b);
        }
      }

      console.log(sum(2, 2)); -> 4
      console.log(subtract(2, 2)); -> 0
      console.log(calculator(sun)(2, 2)); -> 4
      console.log(calculator(subtract)(2, 2)); -> 0
  - É possível invocar uma função com menos ou mais parâmetros, não necessariamente seguindo o que está declarado
    Ex.: 
      const sum = function(a, b) {
        return a + b;
      }
      console.log(sum(2, 2)); -> 4
      console.log(sum(2)); -> NaN -> o JavaScript preenche o segundo parâmetro como undefined, e ao somar 2 + undefined = NaN
      console.log(sum(2, 2, 3)); -> 4 -> Quando se passa mais parâmetros do que a função está esperando, o JavaScript ignora os demais parâmetros
  - Podemos definir valores padrão para cada um dos parâmetros de uma função
    Ex.: 
      const sum = function(a = 1, b = 1) {
        return a + b;
      }
      console.log(sum(2, 2)); -> 4
      console.log(sum(2)); -> 3
      console.log(sum()); -> 2
  - Por meio da variável implícita arguments é possível acessar os parâmetros da função invocada
    Ex.:
      const sum = function() {
        console.log(arguments);
      };

      sum(1, 2, 3, 4, 5, 6, 7, 8, 9); -> { '0': 1, '1': 2, '2': 3, '3': 4, '4': 5, '5': 6, '6': 7, '7': 8, '8': 9 }
    Ex.:
      const sum = function() {
        let total = 0;
        for (let argument in arguments) {
          total += arguments[argument];
        }
        return total;
      };
      console.log(sum(1, 2, 3, 4, 5, 6, 7, 8, 9)); -> 45
  - Também é possível acessar os parâmetros da função invocada por meio do rest parameter
    Ex.:
      const sum = function(...numbers) {
        let total = 0;
        for (let number of numbers) {
          total += number;
        }
        return total;
      };
      console.log(sum(1, 2, 3, 4, 5, 6, 7, 8, 9)); -> 45
  - CUIDADO! O rest parameter deve ser sempre o último da lista de parâmetros

# This
  - Existe uma variável implícita chamada de this que faz referência para o objeto responsável pela sua invocação
    Ex.:
      const rectangle = {
        x: 10,
        y: 2'
        calculateArea() {
          return this.x * this.y;
        }
      };
      console.log(rectangle.calculateArea); -> 20

# getter e setter
  - As funções do tipo getter e setter servem para interceptar o acesso as propriedades de um determinado objeto
    Ex.:
      const rectangle = {
        set x(x) {
          if (x > 0) {
            this._x = x;
          } else {
            console.log("Invalid value for x");
          }
        },
        set y(y) {
          if (y > 0) {
            this._y = y;
          } else {
            console.log("Invalid value for y");
          }
        },
        get area() {
          return this._x * this._y;
        }
      };
      rectangle.x = 10;
      rectangle.y = 2;
      console.log(rectangle.area); -> 20
  - CUIDADO! Sempre utilize chaves diferentes para a função getter e a propriedade do objeto
  - Por meio da operação defineProperty da Object API, também é possível definir funções do tipo getter e setter
    Ex.:
      const rectangle = {};
      Object.defineProperty(rectangle, "x", {
        set(x) {
          if (x > 0) {
            this._x = x;
          } else {
            console.log("Invalid value for x");
          }
        }
      });
      Object.defineProperty(rectangle, "y", {
        set(y) {
          if (y > 0) {
            this._y = y;
          } else {
            console.log("Invalid value for y");
          }
        }
      });
      Object.defineProperty(rectangle, "area", {
        get() {
          return this._x * this._y
        }
      });
      rectangle.x = 10;
      rectangle.y = 2;
      console.log(rectangle.area); -> 20
  - CUIDADO! Sempre utilize chaves diferentes para a função setter e a propriedade do objeto

# call, apply e bind
  - Por meio das operações call e apply é possível invocar uma função passando o this por parâmetro
    Ex.:
      const calculateArea = function() {
        return Math.PI * Math.pow(this.radius, 2);
      };
      const circle = {
        radius: 10,
        calculateArea
      };
      console.log(calculateArea.call(circle)); -> 314.1592653589793
      console.log(calculateArea.apply(circle)); -> 314.1592653589793
  - Qual é a diferença entre call e apply? Basicamente a diferença entre ele é a forma de como passar os parâmetros
    Ex.:
      const calculateArea = function(fn) {
        return fn(Math.PI * Math.pow(this.radius, 2));
      };
      const circle = {
        radius: 10,
        calculateArea
      };
      console.log(calculateArea.call(circle, Math.round)); -> 314
      console.log(calculateArea.apply(circle, [Math.ceil])); -> 314
  - A operação bind permite encapsular o this dentro da função, retornando-a
    Ex.:
      const calculateArea = function(fn) {
        return fn(Math.PI * Math.pow(this.radius, 2));
      };
      const circle = {
        radius: 10,
        calculateArea
      };
      const calculateAreaForCircle = calculateArea.bind(circle);
      console.log(calculateAreaForCircle(Math.round)); -> 314
      console.log(calculateAreaForCircle(Math.ceil)); -> 314

# new
  Ex.: 
    const person1 = {
      name: "Linus Torvalds",
      city: "Helsinki",
      year: 1969,
      getAge() {
        return (new Date()).getFullYear() - this.year;
      }
    };
    const person2 = {
      name: "Bill Gates",
      city: "Seattle",
      year: 1955,
      getAge() {
        return (new Date()).getFullYear() - this.year;
      }
    };
    console.log(person1);
    console.log(person1.getAge());
    console.log(person2);
    console.log(person2.getAge());
  - Como fazer para criar um objeto a partir da mesma estrutura?
  - A função fábrica, que é um tipo de padrão, retorna um novo objeto após ser invocada diretamente
    Ex.:
      const createPerson = function(name, city, year) {
        return {
            name,
            city,
            year,
            getAge() {
              return (new Date()).getFullYear() - this year;
            }
        };
      };
      const person1 = createPerson("Linus Torvalds", "Helsinki", 1969);
      const person2 = createPerson("Bill Gates", "Seattle", 1955);
  - O que fazer para eliminar a duplicação e reusar propriedades entre os objetos?
    Ex.:
      const personPrototype = {
        getAge() {
          return (new Date()).getFullYear() - this year;
        }
      };
      const createPerson = function(name, city, year) {
        const person = {
            name,
            city,
            year,
        };
        Object.setPrototypeOf(person, personPrototype);
        return person;
      };
      const person1 = createPerson("Linus Torvalds", "Helsinki", 1969);
      const person2 = createPerson("Bill Gates", "Seattle", 1955);
  - A função construtora retorna um novo objeto ao ser invocada por meio do operador new
    Ex.:
    // Script do operador new
    const _new = function(fn, ...params) {
      const obj = {};
      Object.setPrototypeOf(obj, fn.prototype);
      fn.apply(obj, params);
      return obj;
    };
      const Person = function(name, city, year) {
        this.name = name;
        this.city = city;
        this.year = year;
        this.getAge = function() {
          return (new Date()).getFullYear() - this year;
        }
      };
      const person1 = _new(Person, "Linus Torvalds", "Helsinki", 1969);
      const person2 = _new(Person, "Bill Gates", "Seattle", 1955);
  - Toda função tem uma propriedade chamada prototype, que é vinculada ao __proto__ do objeto criado pelo operador new
    Ex.:
      const Person = function(name, city, year) {
        this.name = name;
        this.city = city;
        this.year = year;
      };
      Person.prototype.getAge = function() {
          return (new Date()).getFullYear() - this year;
        }
      const person1 = new Person("Linus Torvalds", "Helsinki", 1969);
      const person2 = new Person("Bill Gates", "Seattle", 1955);
  - CUIDADO! Não esqueça de utilizar o operador new quando utilizar funções construtoras

# instanceof
  - Com o operador instanceof é possível verificar se um objeto foi criado por meio de uma determinada função construtora 
    analisando a sua cadeia de protótipos
    Ex.: 
      const date = new Date();
      console.log(date instanceof Date); -> true
      console.log(date instanceof Object); -> true
      console.log(date instanceof Array); -> false
  - Qual é a diferença entre o typeof e o instanceof?
    - O typeof revela o tipo de dado de uma determinada variável
      Ex.:
        console.log(typeof date); -> object
    // Script do instanceof
    const _instanceof = function(obj, fh) {
      if (obj === fn.prototype) return true
      if (obj === null) return false;
      return _instanceof();
    }
    const date = new Date();
    console.log(date _instanceof Date); -> true
    console.log(date _instanceof Object); -> true
    console.log(date _instanceof Array); -> false

# Arrow Function
  - As arrow functions tem uma abordagem mais simples e direta para escrever uma função e podem melhorar a
   legibilidade do código em diversas situações
    Ex.: 
      const sum = (a, b) => {
        return a + b;
      };
      const subtract = (a, b) => a - b; (também é possível declarar uma arrow function em uma linha sem as 
      chaves ({}) nesse caso o return é automático)

      const calculator = (fn) => {
        return (a, b) => {
          return fn(a, b);
        };
      };
      console.log(calculator(sum)(2, 2)); -> 4
      console.log(calculator(subtract)(2, 2)); -> 0
  - CUIDADO! As arrow functions não possuem as suas próprias variáveis this e arguments
    Ex.:
      const person = {
        name: "James Gosling",
        city: "Alberta",
        year: 1955,
        getAge: () => {
          return (new Date()).getFullYear() - this.year;
        }
      };
      console.log(person); -> { name: "James Gosling", city: "Alberta", year: 1955, getAge: [Function: getAge] };
      console.log(person.getAge()); -> NaN
    Ex.:
      const sum = () => {
        let total = 0;
        for (let argument in arguments) {
          total += arguments[argument];
        }
        return total;
      };
      console.log(sum(1, 2, 3, 4, 5, 6, 7, 8, 9)); -> ERROR
  - E se um objeto for retornado?
    Ex.:
      const createPerson = (name, city, year) => ({name, city, year});
      const person = createPerson("Alan Kay", "Springfield", 1940);
      console.log(person); -> { name: "Alan Kay", city: "Springfield", year: 1940 }

# Execution Context
  - O Execution Context é o ambiente onde o código é executado, sendo composto pelo variable object, scope 
    chain e this
    Ex.:
      const v1 = 10;
      const fn1 = function() {
        const fn2 = function() {
          console.log(v1);
        };
        fn2();
      };
      fn1();
  - Não é possível acessar de fora uma variável que foi declarada dentro de uma função
    Ex.:
      const v1 = 10;
      const fn1 = function() {
        const fn2 = function() {
          console.log(v1);
          const v2 = 1000;
        };
        fn2();
      };
      fn1();
      console.log(v2); -> Error: v2 is not defined
  - Toda função tem uma variável this que contém a referência para o objeto responsável pela sua invocação
    Ex.:
      const obj1 = {
        p1: 10,
        getP1: function() {
          const fn1 = function() {
            return this.p1;
          }
          return fn1();
        }
      };
      console.log(obj1.getP1()); -> undefined
    - Para ter a referencia this do obj1
      Ex.:
        const obj1 = {
        p1: 10,
        getP1: function() {
          const that = this;
          const fn1 = function() {
            return that.p1;
          }
          return fn1();
        }
      };
      console.log(obj1.getP1()); -> 10
      - ou nesse caso a arrow function também funciona
        Ex.:
        const obj1 = {
        p1: 10,
        getP1: function() {
          const fn1 = () => {
            return this.p1;
          }
          return fn1();
        }
      };
      console.log(obj1.getP1()); -> 10

# Closures
  - Na linguagem JavaScript, toda função permite a utilização de variáveis que não foram declaradas e nem 
    passadas por parâmetro
    Ex.:
      const v1 = 10;
      function fn1() {
        function fn2 () {
          console.log(v1);
        };
        fn2();
      };
      fn1();
  - O problema é que como as funções são de primeira classe, dependendo da situação poderia existir uma 
    ambiguidade e isso foi resolvido com o conceito de closure
    Ex.:
      function fn1() {
        const v1 = 10;
        return function() {
          console.log(v1);
        };
      };
      const fn2 = fn1();
      const v1 = 100;
      fn2(); -> 10
  - Resumindo, closure é uma função com um scope chain estático que é definida no momento em que a função é 
    criada, por isso, todas as funções na linguagem JavaScript são closures
    Ex.:
      const v1 = 10;
      function fn1() {
        console.log(v1);
      };
      function fn2(fn1) {
        const v1 = 100;
        fn1();
      };
      fn2(fn1); -> 10
  - Apesar de ser estático, o scope chain faz referência para objetos que estão na memória e podem ser 
    compartilhados por mais de uma função
    Ex.:
      function fn1() {
        let v1 = 10;
        return {
          m1() {
            console.log(++v1);
          },
          m2() {
            console.log(--v1);
          }
        };
      };
      const obj1 = fn1();
      obj1.m1(); -> 11
      obj1.m2(); -> 10
    -------------------------------
      const obj1 = {};
      for (var v1 = 0; v1 < 3; v1++) {
        obj1[v1] = (function (v2) {
          return function () {
            console.log(v2);
          }
        })(v1);
      };
      obj1[0](); -> 0
      obj1[1](); -> 1
      obj1[2](); -> 2

# Tratamento de Exceções
  - Na linguagem JavaScript, qualquer tipo de dado pode ser lançado como um erro interrompendo o 
    fluxo de execução
    Ex.:
      const Rectangle = function(x, y) {
        this.x = x;
        this.y = y;
        this.calculateArea = function() {
          if (this.x > 0 && this.y > 0) {
            return this.x * this.y;
          } else {
            throw "Invalid value for x or y";
          }
        }
      }
      try {
        const rectangle = new Rectangle(-10, -2);
        console.log(rectangle.calculateArea()); -> ERROR: Invalid value for x or y
      } catch (e) {
        console.log(e); -> ERROR: Invalid value for x or y
      }
