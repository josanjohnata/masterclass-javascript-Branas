# Object
  - Um objeto é uma coleção dinâmica de propriedades definidas por chaves, que podem ser do tipo
    String ou Symbol, e valores que podem ser de qualquer tipo de dado
    ---------------------------
    |    chave   |    Valor   |
    ---------------------------
    |   title    | Clean Code |
    ---------------------------
    |author | Robert C. Martin |
    ---------------------------
    |   pages    |     464    |
    ---------------------------
    | languages  |  English   |
    ---------------------------
    | available  |    true    |
    ---------------------------
  - É possível criar objetos de várias formas: pela notação literal, por meio de uma função
    construtora ou do método create da Object API
    - {} -> {}
    - new Object(); -> {}
    - Object.create(null); -> {}
  - Uma das diversas maneiras de atribuir propriedades a um objeto é durante a sua inicialização,
    pela notação literal
    Ex.:
      const book = {
        title: "Clean Code",
        author: "Robert C. Martin".
        pages: 464,
        language: "English",
        available: true
      };
      console.log(book); -> {title: 'Clean Code', author: 'Robert C. Martin', pages: 464, language: 'English', available: true}
    Outra forma de criar um objeto é a partir de variáveis
    Ex.:
      const title = "Clean Code";
      const author = "Robert C. Martin";
      const pages = 464;
      const language = "English";
      const available = true;
      const book = {
          title,
          author,
          pages,
          language,
          available
      };
      console.log(book); -> {title: 'Clean Code', author: 'Robert C. Martin', pages: 464, language: 'English', available: true}
  - Dependendo da chave é necessário declará-la diretamente como String
    Ex.:
      const book = {
        10: "Clean Code",
        0xff: "Robert C. Martin".
        "number-of-pages": 464,
        language: "English",
        available: true
      };
      console.log(book); -> {'10': 'Clean Code', '255': 'Robert C. Martin', 'number-of-pages': 464, language: 'English', available: true}
  - Também é possível computar as chaves em tempo de execução
    Ex.:
      const key1 = "Clean Code";
      const key2 = "Robert C. Martin";
      const key3 = 464;
      const key4 = "English";
      const key5 = true;

      const book = {
        [key1]: "Clean Code",
        [key2]: "Robert C. Martin".
        [key3]: 464,
        [key4]: "English",
        [key5]: true
      };
      console.log(book); -> {title: 'Clean Code', author: 'Robert C. Martin', pages: 464, language: 'English', available: true}
  - Além da notação literal, é possível atribuir propriedades aos objetos por meio da sua referência
    Ex.:
      const book = {}; (Além da declaração literal, as declarações `new Object()` ou `Object.create(null)` funcionaria da mesma forma)
      book.title = "Clean Code";
      book.author = "Robert C. Martin";
      book.pages = 464;
      book.language = "English";
      book.available = true;
      console.log(book); -> {title: 'Clean Code', author: 'Robert C. Martin', pages: 464, language: 'English', available: true}
  - Assim como na notação literal, é possível computar as chaves de um objeto em tempo de execução por meio da sua referência
    Ex.:
      const key1 = "Clean Code";
      const key2 = "Robert C. Martin";
      const key3 = 464;
      const key4 = "English";
      const key5 = true;

      const book = {};
      book[key1] = "Clean Code";
      book[key2] = "Robert C. Martin";
      book[key3] = 464;
      book[key4] = "English";
      book[key5] = true;
      console.log(book); -> {title: 'Clean Code', author: 'Robert C. Martin', pages: 464, language: 'English', available: true}
  - Cada uma das propriedades de um objeto podem ser consultadas por meio da sua referência, de forma direta
    Ex.:
      const book = {
        10: "Clean Code",
        0xff: "Robert C. Martin".
        "number-of-pages": 464,
        language: "English",
        available: true
      };
      console.log(book.title); -> {'Clean Code'}
      console.log(book.author); -> {'Robert C. Martin'}
      console.log(book.pages); -> {464}
      console.log(book.language); -> {'English'}
      console.log(book.available); -> {true}
  - É possível consultar cada uma das propriedades de um objeto por meio da computação das chaves
    Ex.:
      const book = {
        10: "Clean Code",
        0xff: "Robert C. Martin".
        "number-of-pages": 464,
        language: "English",
        available: true
      };
      for (let key in book) {
        console.log(key); -> {title, author, pages, language, available}
        console.log(book[key]); -> {'Clean Code', 'Robert C. Martin', 464, 'English', true}
      }

      Ex.:
      const book1 = {
        10: "Clean Code",
        0xff: "Robert C. Martin".
        "number-of-pages": 464,
        language: "English",
        available: true
      };
      const book2 = {};

      for (let key in book1) {
        book2[key] = book1[key];
      }
      console.log(book2); -> {title: 'Clean Code', author: 'Robert C. Martin', pages: 464, language: 'English', available: true}
