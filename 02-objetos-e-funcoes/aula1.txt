# Object
  - Um objeto é uma coleção dinâmica de propriedades definidas por chaves, que podem ser do tipo
    String ou Symbol, e valores que podem ser de qualquer tipo de dado
    ---------------------------
    |    chave   |    Valor   |
    ---------------------------
    |   title    | Clean Code |
    ---------------------------
    |author | Robert C. Martin |
    ---------------------------
    |   pages    |     464    |
    ---------------------------
    | languages  |  English   |
    ---------------------------
    | available  |    true    |
    ---------------------------
  - É possível criar objetos de várias formas: pela notação literal, por meio de uma função
    construtora ou do método create da Object API
    - {} -> {}
    - new Object(); -> {}
    - Object.create(null); -> {}
  - Uma das diversas maneiras de atribuir propriedades a um objeto é durante a sua inicialização,
    pela notação literal
    Ex.:
      const book = {
        title: "Clean Code",
        author: "Robert C. Martin".
        pages: 464,
        language: "English",
        available: true
      };
      console.log(book); -> {title: 'Clean Code', author: 'Robert C. Martin', pages: 464, language: 'English', available: true}
    Outra forma de criar um objeto é a partir de variáveis
    Ex.:
      const title = "Clean Code";
      const author = "Robert C. Martin";
      const pages = 464;
      const language = "English";
      const available = true;
      const book = {
          title,
          author,
          pages,
          language,
          available
      };
      console.log(book); -> {title: 'Clean Code', author: 'Robert C. Martin', pages: 464, language: 'English', available: true}
  - Dependendo da chave é necessário declará-la diretamente como String
    Ex.:
      const book = {
        10: "Clean Code",
        0xff: "Robert C. Martin".
        "number-of-pages": 464,
        language: "English",
        available: true
      };
      console.log(book); -> {'10': 'Clean Code', '255': 'Robert C. Martin', 'number-of-pages': 464, language: 'English', available: true}
  - Também é possível computar as chaves em tempo de execução
    Ex.:
      const key1 = "Clean Code";
      const key2 = "Robert C. Martin";
      const key3 = 464;
      const key4 = "English";
      const key5 = true;

      const book = {
        [key1]: "Clean Code",
        [key2]: "Robert C. Martin".
        [key3]: 464,
        [key4]: "English",
        [key5]: true
      };
      console.log(book); -> {title: 'Clean Code', author: 'Robert C. Martin', pages: 464, language: 'English', available: true}
  - Além da notação literal, é possível atribuir propriedades aos objetos por meio da sua referência
    Ex.:
      const book = {}; (Além da declaração literal, as declarações `new Object()` ou `Object.create(null)` funcionaria da mesma forma)
      book.title = "Clean Code";
      book.author = "Robert C. Martin";
      book.pages = 464;
      book.language = "English";
      book.available = true;
      console.log(book); -> {title: 'Clean Code', author: 'Robert C. Martin', pages: 464, language: 'English', available: true}
  - Assim como na notação literal, é possível computar as chaves de um objeto em tempo de execução por meio da sua referência
    Ex.:
      const key1 = "Clean Code";
      const key2 = "Robert C. Martin";
      const key3 = 464;
      const key4 = "English";
      const key5 = true;

      const book = {};
      book[key1] = "Clean Code";
      book[key2] = "Robert C. Martin";
      book[key3] = 464;
      book[key4] = "English";
      book[key5] = true;
      console.log(book); -> {title: 'Clean Code', author: 'Robert C. Martin', pages: 464, language: 'English', available: true}
  - Cada uma das propriedades de um objeto podem ser consultadas por meio da sua referência, de forma direta
    Ex.:
      const book = {
        10: "Clean Code",
        0xff: "Robert C. Martin".
        "number-of-pages": 464,
        language: "English",
        available: true
      };
      console.log(book.title); -> {'Clean Code'}
      console.log(book.author); -> {'Robert C. Martin'}
      console.log(book.pages); -> {464}
      console.log(book.language); -> {'English'}
      console.log(book.available); -> {true}
  - É possível consultar cada uma das propriedades de um objeto por meio da computação das chaves
    Ex.:
      const book = {
        10: "Clean Code",
        0xff: "Robert C. Martin".
        "number-of-pages": 464,
        language: "English",
        available: true
      };
      for (let key in book) {
        console.log(key); -> {title, author, pages, language, available}
        console.log(book[key]); -> {'Clean Code', 'Robert C. Martin', 464, 'English', true}
      }

      Ex.:
      const book1 = {
        10: "Clean Code",
        0xff: "Robert C. Martin".
        "number-of-pages": 464,
        language: "English",
        available: true
      };
      const book2 = {};

      for (let key in book1) {
        book2[key] = book1[key];
      }
      console.log(book2); -> {title: 'Clean Code', author: 'Robert C. Martin', pages: 464, language: 'English', available: true}

# Undefined e Null
  - O tipo undefined é retornado caso a chave não seja encontrada
    Ex.:
      const book = {
        title: "Clean Code",
        author: "Robert C. Martin".
        pages: 464,
        language: "English",
        available: true
      };
      console.log(book); -> {title: 'Clean Code', author: 'Robert C. Martin', pages: 464, language: 'English', available: true}
      console.log(book.publisher) -> undefined
  - Qual é a diferença entre os tipos undefined e null? O undefined indica que a propriedade não existe e o null indica a ausência de valor
  - É possível consultar uma determinada chave por meio do operador in
    Ex.:
      const book = {
        title: "Clean Code",
        author: "Robert C. Martin".
        pages: 464,
        language: "English",
        available: true
      };
      console.log('title' in book) -> true
      console.log('author' in book) -> true
      console.log('pages' in book) -> true
      console.log('language' in book) -> true
      console.log('available' in book) -> true
      console.log('publisher' in book) -> false
  - Não atribua para undefined ou null com a intenção de apagar uma propriedade
    Ex.:
      const book = {
        title: "Clean Code",
        author: "Robert C. Martin".
        pages: 464,
        language: "English",
        available: true
      };
      book.available = undefined; (nesse caso não estar apagando a propriedade, mas está atribuíndo o valor de undefined, a mesma coisa acontece com null)
      console.log(book) -> {title: 'Clean Code', author: 'Robert C. Martin', pages: 464, language: 'English', available: true, 'available': undefined}
  - As propriedades de um objeto podem ser apagadas por meio do operador delete
    Ex.:
      const book = {
        title: "Clean Code",
        author: "Robert C. Martin".
        pages: 464,
        language: "English",
        available: true
      };
      delete book.available;
      console.log(book) -> {title: 'Clean Code', author: 'Robert C. Martin', pages: 464, language: 'English', available: true}

# Comparação de Objetos
  - A comparação dos objetos é feita por meio da sua referência, assim, ainda que dois objetos tenham exatamente as mesmas propriedades eles
    serão considerados diferentes
    Ex.: 
      const book1 = {
        title: "Clean Code",
        author: "Robert C. Martin"
      };
      const book2 = {
        title: "Clean Code",
        author: "Robert C. Martin"
      }
      console.log(book1 == book2); -> false
      console.log(book1 === book2); -> false
      console.log(book1 === book1); -> true (na comparação só vai ser true quando comparo as referências dos dois objetos)
  - Uma das formas para comparar os objetos é analisando cada uma das suas propriedades por meio da comparação das chaves e valores
    Ex.: 
      const book1 = {
        title: "Clean Code",
        author: "Robert C. Martin"
      };
      const book2 = {
        title: "Clean Code",
        author: "Robert C. Martin",
        pages: 464
      }
      let equal = true;
      for (let key in  book1) {
        if (book1[key] !== book2[key]) equal = false; (nesse caso o critério de comparação é o book1 por isso é necessário fazer outro laço com o book2)
      }
      for (let key in  book2) {
        if (book1[key] !== book2[key]) equal = false; (assim eu garanto que todas as propriedades do book1 é comparada com o book2 e todas as propriedades do book2 é comparada com o book1)
      }
      
      console.log(equal); false
  - ATENÇÃO! Para garantir que um objeto é igual ao outro é necessário verificar seus protótipos

# Herança
  - O principal objetivo da herança é permitir o reuso de código por meio do compartilhamento de propriedades entre objetos, evitando a duplicação
  - Na linguagem JavaScript a herança é realizada entre objetos e não classes
    Ex.:
      const functionalLanguage = {
        paradigm: 'Functional'
      }
      const scheme = {
        name: 'Scheme',
        year: 1975,
        __proto__: functionalLanguage
      };
      const javascript = {
        name: 'JavaScript',
        year: 1995,
        __proto__: functionalLanguage
      };
      console.log(functionalLanguage);
      console.log(scheme);
      console.log(javascript);
  - A propriedade __proto__ é uma referência para o protótipo do objeto
  - Porque a propriedade paradigm não foi exibida dentro do objeto?
  - O método hasOwnProperty pode ser utilizado para determinar se uma propriedade pertence ao objeto
    Ex.:
      const functionalLanguage = {
        paradigm: 'Functional'
      }
      const scheme = {
        name: 'Scheme',
        year: 1975,
        __proto__: functionalLanguage
      };
      const javascript = {
        name: 'JavaScript',
        year: 1995,
        __proto__: functionalLanguage
      };
      for (let key in scheme) {
        console.log(key, scheme.hasOwnProperty(key)); -> name true, year true, paradigm true
      }
  - Os métodos Object.setPrototypeOf e Object.getPrototypeOf permitem a interação com o protótipo do objeto
    Ex.:
      const functionalLanguage = {
        paradigm: 'Functional'
      }
      const scheme = {
        name: 'Scheme',
        year: 1975,
        Object.setPrototypeOf(scheme, setPrototypeOf);
      };
      const javascript = {
        name: 'JavaScript',
        year: 1995,
        Object.setPrototypeOf(javascript, setPrototypeOf);
      };
      for (let key in scheme) {
        console.log(key, scheme.hasOwnProperty(key)); -> name true, year true, paradigm true
      }
  - Como o método Object.create é possível criar um objeto passando o seu protótipo por parâmetro
    Ex.:
      const functionalLanguage = {
        paradigm: 'Functional'
      }
      const scheme = Object.create(functionalLanguage);
      scheme.name: 'Scheme',
      scheme.year: 1975,

      const javascript = Object.create(functionalLanguage);
      javascript.name: 'JavaScript',
      javascript.year: 1995,

      for (let key in scheme) {
        console.log(key, scheme.hasOwnProperty(key)); -> name true, year true, paradigm false
      }
  - CUIDADO! Sem o seu protótipo o objeto perde algumas operações importantes
    Ex.:
      const functionalLanguage = Object.create(null)
      functionalLanguage.paradigm: 'Functional'

      const scheme = Object.create(functionalLanguage);
      scheme.name: 'Scheme',
      scheme.year: 1975,

      const javascript = Object.create(functionalLanguage);
      javascript.name: 'JavaScript',
      javascript.year: 1995,

      for (let key in scheme) {
        console.log(key, scheme.hasOwnProperty(key)); -> TypeError: scheme.hasOwnProperty is not a function - Esse erro é retornado porque o objeto começou como null e não herdou as protos o Object
      }
  - Caso a mesmo propriedade exista no objeto e no seu protótipo, a propriedade do próprio objeto é retornada, fazendo sombra à propriedade do protótipo
    Ex.:
      const functionalLanguage = Object.create({})
      functionalLanguage.paradigm: 'Functional'

      const scheme = Object.create(functionalLanguage);
      scheme.name: 'Scheme',
      scheme.year: 1975,

      const javascript = Object.create(functionalLanguage);
      javascript.name: 'JavaScript',
      javascript.year: 1995,
      javascript.paradigm = 'OO'

      console.log(javascript.paradigm); -> name JavaScript, year 1995, paradigm OO
      console.log(javascript.__proto__.paradigm); -> name JavaScript, year 1995, paradigm Functional
      console.log(Object.getPrototypeOf(javascript).paradigm); -> name JavaScript, year 1995, paradigm Functional
