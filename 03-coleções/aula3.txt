# Set
  - Um Set é um objeto que armazena elementos únicos, que podem ser de qualquer tipo de dado
  Propriedades e Operações:
    - size: Retorna a quantidade de elementos
    - add: Adiciona um elemento
    - forEach: Itera sobre o set
    - has: Retorna true se o elemento existir
    - delete: Remove um elemento
    - clear: Remove todos os elementos
  Ex.:
    const charsets = new Set([ 'ASCII', 'ISO-8859-1', 'UTF-8' ]);
    console.log(charsets); -> Set { 'ASCII', 'ISO-8859-1', 'UTF-8' }
    // caso queira voltar para um array
    console.log(Array.from(charsets)); -> Set [ 'ASCII', 'ISO-8859-1', 'UTF-8' ]

    charsets.add("ASCII");
    charsets.add("ISO-8859-1");
    charsets.add("UTF-8");
    console.log(charsets); -> Set { 'ASCII', 'ISO-8859-1', 'UTF-8' }
    console.log(charsets.size); -> 3
    charsets.forEach(function (charset) {
      console.log(charset); -> ASCII
                               ISO-8859-1
                               UTF-8
    });
    console.log(charsets.has("ASCII")); -> true
    console.log(charsets.has("CP-1252")); -> false
    console.log(charsets.delete("ISO-8859-1")); -> true (O delete retorna true quando consegue deletar o item e false nao não consegue deletar o item)
    console.log(charsets.delete("CP-1252")); -> false
    charsets.clear()
    console.log(charsets) -> Set {}

    Qual a diferença de um Set para um Array?
    - Basicamente a diferença é não permitir dados duplicados
    Ex.:
      const array = [];
      array.push(10);
      array.push(10);
      array.push(10);
      console.log(array); -> [ 10, 10, 10 ]
      console.log(array.length); -> 3

      const set = new Set;
      set.add(10);
      set.add(10);
      set.add(10);
      console.log(set); -> { 10 }
      console.log(set.size); -> 1
      // Porém o set pode deletar elementos duplicados de um array
      let array2 = [ 10, 10, 10 ];
      console.log(array2); -> [ 10, 10, 10 ]
      console.log(array2.length); -> 3

      const set2 = new Set(array2);
      console.log(set); -> { 10 }
      console.log(set.size); -> 1
      // trazendo o array do set
      array2 = Array.from(set);
      console.log(array2); -> [ 10 ]
      console.log(array2.length); -> 1

# WeakSet
  - WeakSet é um objeto, similar ao Set, que permite apenas valores do tipo Object e mantém as referências de forma fraca, sendo volátil e não iterável
    Operações:
      - add: Adiciona um elemento
      - has: Retorna true se o elemento existir
      - delete: Remove um elemento
    Ex.:
      const ws1 = new WeakSet();
      console.log(ws1); -> WeakSet {} (ele so aceita o tipo Object, quando se tenta atribuir um tipo diferente ele retorna um erro)

      const obj1 = {};
      const obj2 = {};
      ws1.add(obj1);
      ws1.add(obj2);
      console.log(ws1.delete(obj1)); -> true (ele retorna true porque ele conseguiu deletar o elemento)
      console.log(ws1.has(obj1)); -> false
      console.log(ws1.has(obj2)); -> true

      Para que serve um WeakSet?
        - Ele serve para criar coleções de elementos onde não teremos uma preocupação com possiveis memories leaks (vazamentos de memórias), porque será 
          possível adiciona muitas vezes uma grande quantidade de elementos, e no momento em que esses elementos (objetos) se torne não mais referenciados
          eles se tornam elegiveis para coleta o garbage collection os tiram da memória e não vamos nos preocupar de remover da memória esse tipo de 
          estrutura de dados.
      
      const circles = new WeakSet();
      function Circle(radius) {
        circles.add(this);
        this.radius = radius;
      };
      Circle.prototype.calculateArea = function() {
        if (!circles.has(this)) throw "Invalid Object";
        return Math.PI * Math.pow(this.radius, 2);
      }
      const circle1 = new Circle(10);
      const circle2 = {
        radius: 5
      }
      console.log(circle1.calculateArea()); -> 314.1592653589793
      console.log(circle1.calculateArea.call(circle2)); -> 78.53981633974483
