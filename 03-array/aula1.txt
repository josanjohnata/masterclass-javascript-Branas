# Array
  - Um Array é apenas um objeto que oferece operações para acessar e manipular suas propriedades
    Ex.:
      const languages = [];
      console.log(typeof languages); -> object
      console.log(languages instanceof Array); -> true

      const languages = ["Python", "C", "Java"];
      console.log(languages); -> [ 'Python', 'C', 'Java' ]

      const languages = new Array("Python", "C", "Java");
      console.log(languages); -> [ 'Python', 'C', 'Java' ]
  - É possível inicializar passando apenas um Number para a função construtora
      Ex.:
        const numbers = new Array(10);
        console.log(numbers); -> [ <10 empty items> ]
  - A propriedade length indica a quantidade de elementos que existem dentro do Array
      Ex.:
        const languages = [];
        languages[0] = "Python";
        languages[1] = "C";
        languages[2] = "Java";
        console.log(languages); -> [ 'Python', 'C', 'Java' ]
        console.log(languages.length); -> 3
  - Os elementos vazios dentro do Array não são considerado no length
      Ex.:
        const languages = ["Python", "C", "Java"];
        delete languages[1];
        console.log(languages); -> [ 'Python', <1 empty item>, 'Java' ]
        console.log(languages.length); -> 3

# Array Mutator API
  - Os mutator methods quando invocados modificam o array
    - push: Adiciona um elemento no final
    - pop: Remove um elemento do final
    - unshift: Adiciona um elemento no início
    - shift: Remove um elemento no início
    - splice: Remove, substitui ou adiciona um ou mais elementos em uma determinada posição
    - sort: Ordena os elementos de acordo com a função de ordenação
    - reverse: Inverte a ordem dos elementos
    - fill: Preenche ps elementos de acordo com a posição de início e fim

    Ex.:
      const languages = ["Python", "C", "Java"];
      console.log(languages); -> [ 'Python', 'C', 'Java' ]
      console.log(languages.push("Go")); -> 4 (ele retorna um novo length)
      console.log(languages); -> [ 'Python', 'C', 'Java', 'Go' ]
      console.log(languages.pop()); -> Go (ele retorna o ultimo elemento que está sendo removido)
      console.log(languages); -> [ 'Python', 'C', 'Java' ]
      console.log(languages.unshift("Go")); -> 4 (ele retorna um novo length)
      console.log(languages); -> [ 'Go', 'Python', 'C', 'Java' ]
      console.log(languages.shift); -> Go (ele retorna o primerio elemento que está sendo removido)
      console.log(languages); -> [ 'Python', 'C', 'Java' ]
      console.log(languages.splice(1, 1)); -> [ 'C' ] (nesse caso ele recebe dois parâmetros, o primeiro é a posição 
        do elemento que deseja remover e o segundo é a quantidade de elementos. Então ele retorna um array 
        de elementos removidos)
      console.log(languages); -> [ 'Python', 'Java' ]
      console.log(languages.splice(1, 0, "C++", "C#")); -> [] (nesse caso como o segundo parâmetro é 0, ele está criando
        um elemento na posição 1 e adiciona o C++ e o C#)
      console.log(languages); -> [ 'Python', 'C++', 'C#', 'Java' ]
      console.log(languages.splice(1, 2, "C")); -> [] (nesse caso estamos removendo 2 elementos a partir da posição 1 de 
        adicionando o C na posição 1 novamente)
      console.log(languages); -> [ 'Python', 'C', 'Java' ]
      const languages = [
        {
          name: "Python",
          year: 1991
        },
        {
          name: "C",
          year: 1972
        },
        {
          name: "Java",
          year: 1995
        }
      ];
      languages.sort(function(a, b) {
        return a.year - b.year;
      });
      console.log(languages); -> [ {name: 'C', year: 1972}, {name: 'Python', year: 1991}, {name: 'Java', year: 1995} ] (nesse caso foi ordenado pelo ano)
      languages.sort(function(a, b) {
        return (a.name <= b.name) ? -1 : 1;
      });
      languages.sort(function(a, b) {
        return a.name.localeCompare(b.name); (o localeCompare já retorna o 1 ou -1, essa função é uma novidade do javascript)
      });
      console.log(languages); -> [ {name: 'C', year: 1972}, {name: 'Java', year: 1995}, {name: 'Python', year: 1991} ] (nesse caso foi ordenado pelo nome)
      const languages = ["Python", "C", "Java"];
      console.log(languages); -> [ 'Python', 'C', 'Java' ]
      languages.reverse();
      console.log(languages); -> [ 'Java', 'C', 'Python' ]
      const languages = ["Python", "C", "Java"];
      languages.fill("JavaScript") (ele simplesmente preenche todo o array com o elemento determinado)
      console.log(languages); -> [ 'JavaScript', 'JavaScript', 'JavaScript' ]
      languages.fill("JavaScript", 1) (é possível passar um segundo parâmetro com a posição que deseja preencher a partir dessa posição)
      console.log(languages); -> [ 'Java', 'JavaScript', 'JavaScript' ]

# Array Iteration API
  - iteration methods quando invocados iteram sobre os elementos do array
    - forEach: Executa a função passada por parâmetro para cada elemento
    - filter: Retorna um novo array contendo somente os elementos que retornaram true na função passada por parâmetro
    - find: Retorna o primeiro elemento que retornou true na função passada por parâmetro
    - some: Retorna true se um ou mais elementos retornaram true na função passada por parâmetro
    - every: Retorna true se todos os elementos retornaram true na função passada por parâmetro
    - map: Retorna um novo array com base no retorno da função passada por parâmetro
    - reduce: Retorna um valor com base no retorno da função passada por parâmetro

    Ex.:
      const frameworks = ["Angular.js", "Ember.js", "Vue.js"];
      frameworks.forEach((framework) => {
        console.log(framework) -> (vai retornar todos os itens do array, um por vez)
      })

      const frameworks = [
        {
          name: "Angular.js",
          contributors: 1548
        },
        {
          name: "Ember.js",
          contributors: 746
        },
        {
          name: "Veu.js",
          contributors: 240
        }
      ];
      const result = frameworks.filter((framework) => {
        return framework.contributors < 1000;
      });
      console.log(result); -> (vai retornar apenas os objetos que tiver o numeros de contribuidores menor que mil)

      const result = frameworks.find((framework) => {
        return framework.name === "Angular.js";
      });
      console.log(result); -> (vai retornar o primeiro item do array que tiver o name Angular.js)

      const result = frameworks.some((framework) => {
        return framework.name.includes("js");
      });
      console.log(result); -> (vai retornar true se pelo menos um dos name tiver js)
      
      const result = frameworks.every((framework) => {
        return framework.contributors < 1000;
      });
      console.log(result); -> (vai retornar true se todos os contributors forem maior que mil)

      const result = frameworks.map((framework) => {
        return framework.name;
      });
      console.log(result); -> (vai retornar um novo array com apenas os names)

      const result = frameworks.reduce((total, framework) => {
        return total + framework.contributors;
      }, 0);
      console.log(result);

# Array Accessor API
  - Os accessor methods quando invocados retornam informações específicas sobre o array
    - indexOf: Retorna a posição do primeiro elemento encontrado
    - lastIndexOf: Retorna a posição do último elemento encontrado
    - includes: Retorna true se o elemento existir
    - concat: Retorna um novo array resultante da concatenação de um ou mais arrays
    - slice: Retorna partes de um determinado array de acordo com a posição de início e fim
    - join: Converte o array para uma String, juntando os elementos com base em um separador

    Ex.:
      const languages = ["Python", "C", "C", "Java"];
      const ooLanguages = ["Smalltalk", "C++", "Simula"];
      const functionalLanguages = ["Haskell", "Scheme"];

      console.log(languages.indexOf("C")) -> 1
      console.log(languages.indexOf("javascript")) -> -1
      console.log(languages.lastIndexOf("C")) -> 2
      console.log(languages.includes("C")) -> true
      console.log(languages.includes("javascript")) -> false

      const languagesConcat = ooLanguages.concat(functionalLanguages);
      const languagesConcat2 = [].concat(ooLanguages, functionalLanguages);
      console.log(languagesConcat); -> [ 'Smalltalk', 'C++', 'Simula', 'Haskell', 'Scheme' ]
      console.log(languagesConcat2); -> [ 'Smalltalk', 'C++', 'Simula', 'Haskell', 'Scheme' ]

      const languages = ["Smalltalk", "C++", "Simula", "Haskell", "Scheme"];
      console.log(languages.slice(0, 2)); -> [ 'Smalltalk', 'C++' ]
      console.log(languages.slice(2, 4)); -> [ 'Simula', 'Haskell' ]
      console.log(languages.slice(1)); -> [ 'C++', 'Simula', 'Haskell', 'Scheme' ]
      
      console.log(languages.join(";")); -> Smalltalk;C++;Simula;Haskell;Scheme
      console.log(languages.join(",")); -> Smalltalk,C++,Simula,Haskell,Scheme
      console.log(languages.join("")); -> SmalltalkC++SimulaHaskellScheme
