# Boolean
  - O tipo Boolean é primitivo, imutável e representado pelas palavras reservadas true e false
    - true -> true
    - false -> false
    - typeof true -> 'boolean'
    - typeof false -> 'boolean'
    - new Boolean(true); -> [Boolean: true]
    - new Boolean(false); -> [Boolean: false]
    - typeof new Boolean(true); -> 'object'
  - Cuidado com a coersão de tipo!
    - A coersão de tipo acontece quando um tipo de dado é utilizado em um contexto onde ele é convertido de forma implícita ou explícita
    - !!0; -> false
    - !!NaN; -> false
    - !!""; -> false
    - !!false -> false
    - !!undefined; -> false
    - !!null; -> false
      - Apenas esses 6 valores acima são false todo o resto é true
    - !!-10; -> true
    - !!'JavaScript'; -> true
    - !!{}; -> true
    - !![]; -> true
    - !!/JavaScript/; -> true
    - !!new Date(); -> true
    - !!function () {}; -> true

# Operadores Booleanos
  - Operadores de comparação ==, ===, !=, !==, <, >, <= e >=
    - 1 == 2; -> false
    - 10 === 10; -> true
    - 'a' != 'b'; -> true
    - 3 !== 2; -> true
    - 6 > 7; -> false
    - 5 >= 5; -> true
    - 'z' < 'x'; -> false
    - 'c' <= 'c'; -> true
  - Cuidado com os operadores de comparação == e !=
    - 0 == ''; -> true
    - 0 == '0'; -> true
    - false == undefined; -> false
    - false == null; -> false
    - null == undefined; -> true
    - 1 == true; -> true
    - 0 == false; -> true
    - 0 == '\n'; -> true
  - Prefira sempre a utilização dos operadores === e !==
    - 0 === ''; -> false
    - 0 === '0'; -> false
    - false === undefined; -> false
    - false === null; -> false
    - null === undefined; -> false
    - 1 === true; -> false
    - 0 === false; -> false
    - 0 === '\n'; -> false
  - Operadores lógicos || e &&
    - 0 || 2; -> 2
    - 1 || 2; -> 1
    - 1 && 2; -> 2
    - 0 && 2; -> 0
      Ex.:
        function generateSerial (max) {
            return Math.floor(Math.random() * max);
        }

        generateSerial(10); -> 6
        generateSerial(100); -> 27
        generateSerial(1000); -> 455
        generateSerial(); -> NaN
        --------------------------------------
        Para garantir que não retorne NaN, essa maneira funciona, mas não é a mais indicada.
        function generateSerial (max) {
            if (max === undefined) {
                max = 1000;
            }
            return Math.floor(Math.random() * max);
        }

        generateSerial(10);
        generateSerial(100);
        generateSerial(1000);
        generateSerial();
        --------------------------------------
        Para garantir que não retorne NaN, essa maneira é a mais indicada, mas ainda da pra melhorar.

        function generateSerial (max) {
            if (!max) {
                max = 1000;
            }
            return Math.floor(Math.random() * max);
        }

        generateSerial(10);
        generateSerial(100);
        generateSerial(1000);
        generateSerial();
        --------------------------------------
        Para garantir que não retorne NaN, essa maneira indica que você tem um ótimo conhecimento da linguagem JavaScript.
        function generateSerial (max) {
            max = max || 1000;
            return Math.floor(Math.random() * max);
        }

        generateSerial(10);
        generateSerial(100);
        generateSerial(1000);
        generateSerial();
  - Operador ternário (expressão) ? true : false
    - (10) ? 'good' : 'bad'; -> 'good'
    - (0) ? 'good' : 'bad'; -> 'bad''
    
