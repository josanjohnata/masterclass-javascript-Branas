# String
  - O tipo String é primitivo, imutável e é representado internamente pelo padrão Unicode, codificado em UTF-16
  - Existem 3 formas de declarar uma String de forma literal: aspas simples, aspas duplas ou acento grave
    - 'JavaScript' -> 'JavaScript'
    - "JavaScript" -> 'JavaScript'
    - `JavaScript` -> 'JavaScript'
  - Também é possível declarar uma String por meio da sua função construtora
    - new String('JavaScript'); -> [String: 'JavaScript']
    - new String("JavaScript"); -> [String: 'JavaScript']
    - new String(`JavaScript`); -> [String: 'JavaScript']
  - ATENÇÃO! A função construtora é mais lenta e pode prejudicar a performance
  - Alguns tipos de caracteres não são permitidos e precisam ser escapados
    - console.log("Each constructor is a function that has a property named \"prototype\" that is used to implement
      prototype-based inheritance and shared properties.");
    - console.log('An object\'s prototype chain should have finite length.');
    - console.log(`The proper way to cause a line terminator code point to be part of the String value of a string
      literal is to use an escape sequence such as \\n or \\u000A);
  - Existem também caracteres de controle que podem ser utilizados para quebrar linhas, aumentar a indentação entre outras coisas
    - \b -> Backspace
    - \f -> Form Feed
    - \n -> New line
    - \r -> Carriege Return
    - \t -> Horizontal Tabulator
    - \v -> Vertical Tabulator
      Ex.:
      - let daysOfWeek = "0 - Sun\n1 - Mon\n2 - Tue\n3 - Wed\n4 - Thu\n5 - Fri/n6 - Sat";
        console.log(daysOfWeek);
        0 - Sun
        1 - Mon
        2 - Tue
        3 - Wed
        4 - Thu
        5 - Fri
        6 - Sat
  - É possível escrever caracteres utilizando seu code point no padrão Unicode
    Ex.:
    - let daysOfWeekInCodePoints = "\u0030 \u002d \u0053\u0075\u006e\u000A\u0031 \u002d \u004d\u006f\u006e\u000A\u0032 \u002d \u0054\u0075\u0065\u000A\u0033 \u002d \u0057\u0065\u0064\u000A\u0034 \u002d \u0054\u0068\u0075\u000A\u0035 \u002d \u0046\u0072\u0069\u000A\u0036 \u002d \u0053\u0061\u0074";
      console.log(daysOfWeekInCodePoints);
      0 - Sun
      1 - Mon
      2 - Tue
      3 - Wed
      4 - Thu
      5 - Fri
      6 - Sat

# Template Literal
  - Um template literal é uma forma de declarar uma String que permite a interpolação de expressões
    Ex.:
      let host = "localhost";
      let port = "3000";
      let resource = "users";
      let url = "https://" + host + ":" + port + "/" + resource;
      console.log(url); -> https://localhost:3000/users
      ou
      let url = `https://${host}:${port}/${resource};
      console.log(url); -> https://localhost:3000/users
  - Além da interpolação de expressões é possível também declarar uma String multi linha, sem a necessidade de caracteres especiais
    Ex.:
      let monthsOfYear = "0 - Jan" + 
      "1 - Feb" + 
      "2 - Mar" + 
      "3 - Apr" + 
      "4 - May" + 
      "5 - Jun" +
      "6 - Jul" +
      "7 - Aug" +
      "8 - Sep" +
      "9 - Oct" + 
      "10 - Nov" +
      "11 - Dec"
      console.log(monthsOfYear); -> 0 - Jan1 - Feb2 - Mar3 - Apr4 - May5 - Jun6 - Jul7 - Aug8 - Sep9 - Oct10 - Nov11 - Dec
      ou
      let monthsOfYear = "0 - Jan\
      1 - Feb\
      2 - Mar\
      3 - Apr\
      4 - May\
      5 - Jun\
      6 - Jul\
      7 - Aug\
      8 - Sep\
      9 - Oct\
      10 - Nov\
      11 - Dec";
      console.log(monthsOfYear); -> 0 - Jan1 - Feb2 - Mar3 - Apr4 - May5 - Jun6 - Jul7 - Aug8 - Sep9 - Oct10 - Nov11 - Dec
      ou
      let monthsOfYear = "0 - Jan\n\
      1 - Feb\n\
      2 - Mar\n\
      3 - Apr\n\
      4 - May\n\
      5 - Jun\n\
      6 - Jul\n\
      7 - Aug\n\
      8 - Sep\n\
      9 - Oct\n\
      10 - Nov\n\
      11 - Dec";
      console.log(monthsOfYear); -> 0 - Jan
                                    1 - Feb
                                    2 - Mar
                                    3 - Apr
                                    4 - May
                                    5 - Jun
                                    6 - Jul
                                    7 - Aug
                                    8 - Sep
                                    9 - Oct
                                    10 - Nov
                                    11 - Dec
      - No template literal ele faz a quebra de linha naturalmente:
        let monthsOfYear = `0 - Jan
        1 - Feb
        2 - Mar
        3 - Apr
        4 - May
        5 - Jun
        6 - Jul
        7 - Aug
        8 - Sep
        9 - Oct
        10 - Nov
        11 - Dec`;
        console.log(monthsOfYear); -> 0 - Jan
                                      1 - Feb
                                      2 - Mar
                                      3 - Apr
                                      4 - May
                                      5 - Jun
                                      6 - Jul
                                      7 - Aug
                                      8 - Sep
                                      9 - Oct
                                      10 - Nov
                                      11 - Dec

# String API
  - length: Retorna o tamanho da String
  - indexOf: Retorna a primeira posição encontrada do caractere passado por parâmetro
  - lastIndexOf: Retorna a última posição encontrada do caractere passado por parâmetro
  - toUpperCase: Retorna uma nova String convertendo as letras para maiúsculas
  - toLowerCase: Retorna uma novas String convertendo as letras para minúsculas
  Ex.:
    "JavaScript".length; -> 10
    "PHP".indexOf("P"); -> 0
    "PHP".lastIndexOf("P"); -> 2
    "cobol".toUpperCase(); -> 'COBOL'
    "ALGOL".toLowerCase(); -> 'algol'
  - charAt: Retorna o caractere na posição passada por parâmetro
  - charCodeAt: Retorna o código com base na posição passada por parâmetro
  - fromCharCode: Retorna um caractere com base no código passado por parâmetro
  Ex.:
    "JavaScript".charAt(1); -> 'a'
    "JavaScript".charCodeAt(1); -> 97
    String.fromCharCode(97); -> 'a'
  - includes: Retorna verdadeiro se a String contém a String passada por parâmetro
  - startsWith: Retorna verdadeiro se a String inicia com a String passada por parâmetro
  - endsWith: Retorna verdadeiro se a String termina com a String passada por parâmetro
  Ex.:
    "JavaScript".includes("Java"); -> true
    "Ruby".startsWith("R"); -> true
    "Erlang".endsWith("lang"); -> true
  - localeCompare: Retorna -1 se a String passada por parâmetro for maior, 0 se for igual e 1 se for menor
  Ex.: 
    "C++".localeCompare("Ruby"); -> -1 (sempre que a string que está sendo comparada for menor que a string passada por parâmetro retorna -1)
    "Python".localeCompare("Java"); -> 1 (sempre que a string que está sendo comparada for maior que a string passada por parâmetro retorna 1)
    "JavaScript".localeCompare("JavaScript"); -> 0 (sempre que a string que está sendo comparada for igual que a string passada por parâmetro retorna 0)
  - match: Retorna partes da String com base na RegExp passada por parâmetro
  - search: Retorna a primeira posição encontrada com base na RegExp passada por parâmetro
  - replace: Retorna uma nova String resultante da substituição da String ou RegExp passada no primeiro parâmetro pelo segundo parâmetro
  Ex.: 
    "C++".match(/\+/g); -> ['+', '+'] (obs.: o match so aceita expressões regulares)
    "Java".search(/a/); -> 1 (obs.: o search so aceita expressões regulares)
    "JavaScript".replace("Java", "Ecma"); -> 'EcmaScript'
    "JavaScript".replace(/a/g, 4); -> 'J4v4Script'
  - slice: Retorna uma parte da String que está invocando a função iniciado na posição passada no primeiro parâmetro até a posição final passada no segundo parâmetro,
    ou da posição passada no primeiro parâmetro até o fim caso o segundo parâmetro não seja informado
  - split: Retorna um array contendo o resultado da divisão da String original de acordo com o critério passado por parâmetro
  - substring: Similar ao slice, não aceita valores negativos como parâmetro e permite a inversão dos parâmetros
  Ex.:
    "JavaScript".slice(0, 4); -> 'Java'
    "JavaScript".slice(4); -> 'Script'
    "JavaScript".slice(0, -6); -> 'Java'
    "JavaScript".slice(-6); -> 'Script'
    "C;Java;JavaScript;Ruby".split(";"); -> ['C', 'Java', 'JavaScript', 'Ruby']
    "JavaScript".substring(0, 4); -> 'Java'
    "JavaScript".substring(4, 0); -> 'Java' (o substring identifica que um parâmetro é maior que o outro e inverte os valores)
    "JavaScript".substring(4); -> 'Script'
  - concat: Retorna uma nova String resultante da concatenação da que está invocando a função e da outra, passada por parâmetro
  - padStart: Completa a String com caracteres no início
  - padEnd: Completa a String com caracteres no fim
  - repeat: Repete um caractere
  - trim: Elimina espaços em branco no início e no fim
  - trimLeft: Elimina espaços em branco no início
  - trimRight: Elimina espaços em branco no fim
  Ex.:
    "Java".concat("Script"); -> 'JavaScript'
    "Data".concat("Flex"); -> 'DataFlex'
    "Script".padStart(10, "Java"); -> 'JavaScript'
    "C".padEnd(3, "+"); -> 'C++'
    "C".concat("+".repeat(2)); -> 'C++'
    " Self ".trim(); -> 'Self'
    " Scheme ".trimLeft(); -> 'Scheme '
    " Perl ".trimRight(); -> ' Perl'
