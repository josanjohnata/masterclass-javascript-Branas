# Number

## O tipo Number é primitivo, imutável e é representado internamente pelo padrão IEEE 754 de 64 bits
 - O JavaScript suporta 4 sistemos de numeração decimal, hexadecimal, binário e octal.
  - O sistema de numeração decimal, de base 10, deve iniciar com um número de 1 a 9, seguido por
    números de 0 a 9 com ou sem ponto. indicando se é inteiro ou decimal.
  - O sistema de numeração hexadecimal, de base 16, deve iniciar com 0x ou 0X, seguido por números
    de 0 a 9 e letras de A as F.
  - O sistema de numeração binário, de base 2, de iniciar com 0b ou 0B, seguido por números de 0 a 1.
  - O sistema de numeração octal, de base 8, deve iniciar com 0, 0o ou 0O seguido po números de 0 a 7.

  Ex.: 10 -> 10
       9.9 -> 9.9
       0xFF -> 255
       0b11 -> 3
       010 -> 8
       0X1A -> 26
       0o7 -> 7
       0o12 -> 10

## Também é possivél usar a função construtora do number (new Number()).
  - Quando se cria um número com a função construtora, esse número primitivo é encaixotato em um objeto
    para que ele tenha outras operações.

      Ex.: new Number (10) -> [Number: 10]
       new Number (9.9) -> [Number: 9.9]
       new Number (0xFF) -> [Number: 255]
       new Number (0b11) -> [Number: 3]
       new Number (010) -> [Number: 8]
       new Number (0X1A) -> [Number: 26]
       new Number (0o7) -> [Number: 7]
       new Number (0o12) -> [Number: 10]
  
  - Os métodos toExponential, toFixed e toPrecision podem ser utilizados para mudar a forma como um
    número é representado.
      Ex.: (123.4).toExponential(10) -> '1.2340000000e+2'
           (1234.5).toExponential(10) -> '1.2345000000e+3'
           (123.4).toFixed(10) -> '123.4000000000'
           (10).toFixed(2) -> '10,00'
           (123.4).toPrecision(10) -> '123,4000000'

# Operadores Numéricos

  - Operadores aritméticos (+, -, *, / e %)
    - 2 + 2; -> 4
    - 8 - 3; -> 5
    - 4 * 5; -> 20
    - 9 / 3; -> 3
    - 7 % 2; -> 1 (resto da divisão)
  - Operadores de atribuição (+=, -=, *=, /= e %=)
    let result = 10;
    - result += 2; -> 12
    - result -= 5; -> 7
    - result *= 8; -> 56
    - result /= 2; -> 8
    - result% = 6; -> 4
  - Operadores de incremento e decremento (++ e --), existe o pós e o pré incremento/decremento, onde o pós ele
  retorna primeiro e depois incrementa/decrementa e o pré incrementa/decrementa primeiro e depois retorna.
    let result = 10;
    - result++ -> 10
      result -> 11
    - ++result -> 12
    - result-- -> 12
      result -> 11
    - --result -> 10
  - Operadores binários (|, &, ^, ~, <<, >> e >>>)
    - | or, o or compara bit a bit e sempre que for 0 ou 1 o resultado é 1
      - 4 | 3 -> 7
      - (4).toString(2).padStart(32,0);
        '00000000000000000000000000000100'
        (3).toString(2).padStart(32,0);
        '00000000000000000000000000000011'
        depois de compara os bits o resultado fica
        '00000000000000000000000000000111'
        quando é convertido para decimal fica: 0b111 -> 7
    - & and, o and compara bit a bit e só retorna 1 quando for 1 com 1
      - 3 & 1 -> 1
      - (3).toString(2).padStart(32,0);
        '00000000000000000000000000000011'
        (1).toString(2).padStart(32,0);
        '00000000000000000000000000000001'
        depois de compara os bits o resultado fica
        '00000000000000000000000000000001'
        quando é convertido para decimal fica: 0b1 -> 1
    - ^ xor, o ou exclusivo tem uma caracteristica diferente, somente 1 com 0 da 1, 1 com 1 da 0 e 0 com 0 da 0
      - 5 ^ 2 -> 7
      - (5).toString(2).padStart(32,0);
        '00000000000000000000000000000101'
        (2).toString(2).padStart(32,0);
        '00000000000000000000000000000010'
        depois de compara os bits o resultado fica
        '00000000000000000000000000000111'
        quando é convertido para decimal fica: 0b111 -> 7
    - ~ not, o not inverte todos os bits incluindo o bit de sinal
      - ~2 -> -3
      - (2).toString(2).padStart(32,0);
        '00000000000000000000000000000010'
        (-3).toString(2).padStart(32,0);
        '1111111111111111111111111111101'
    - << deslocando para esquerda, é o mesmo que uma multiplicação por 2, movendo o bit para a esquerda quantas casas forem determinadas
      - 4 << 2 -> 16
       - (4).toString(2).padStart(32,0);
        '00000000000000000000000000000100'
        (16).toString(2).padStart(32,0);
        '00000000000000000000000000010000'
    - >> deslocando para direita, é o mesmo que uma divisão por 2, movendo o bit para a direita quantas casas forem determinadas
      - 128 >> 1 -> 64
       - (128).toString(2).padStart(32,0);
        '00000000000000000000000010000000'
        (64).toString(2).padStart(32,0);
        '00000000000000000000000001000000'
     - >>> rotação que leva o sinal junto, sempre desloca todos os bits uma casa para direita
      - -2 >>> 1 -> 2147483647
       - (-2 >>> 0).toString(2).padStart(32,0);
        '11111111111111111111111111111110'
        (2147483647).toString(2).padStart(32,0);
        '11111111111111111111111111111110'
    OBS.: Cuidado para não confundir os operadores | e & (operador bit a bit) com || e && (operador boolean)

# Conversão Numérica
  - A forma mais simples de converter um número é por meio da invocação da função construtora Number
    - Number("10"); -> 10
    - Number("9.9"); -> 9.9
    - Number("0xFF"); -> 255
    - Number("0b10"); -> 2
    - Number("0o10"); -> 8
    - Number(); -> 0
    - Number("JavaScript"); -> NaN
  - Um outro jeito de realizar conversões é por meio dos operadores Numéricos. Porém, tome CUIDADO, nem todos os
    operadores numéricos realizam a conversão.
    - ~~"10"; -> 10
    - +"10"; -> 10
    - "10" - 0; -> 10
    - "10" * 1; -> 10
    - "10" / 1; -> 10
    não converte e concatena
    - "10" + 0; -> '100'
  - O método toString de um número, permite convertê-lo para qualquer sistema de numeração, bastando indicar qualquer
    é a base desejada
      - (0xA).toString(10); -> '10'
      - (0b1010).toString(16); -> 'a'
      - (010).toString(2); -> '1000'
      - (10).toString(8); -> '12'
  - O método parseInt permite converter uma String para um número. Para isso basta indicar o número e a sua base, que caso
    não seja informada será 10.
      - parseInt("10", 10); -> 10
      - parseInt("9.9", 10); -> 9 (No caso em que tenho casa decimal, a casa decimal se perde por está convertendo para um número inteiro)
      - parseInt("A", 16); -> 10
      - parseInt("11", 2); -> 3
      - parseInt("010", 8); -> 8
  - O método parseFloat é um pouco mais específico e converte apenas números no sistema de numeração decimal.
      - parseFloat("10"); -> 10
      - parseFloat("9.9"); -> 9.9
      - parseFloat("0xFF"); -> 0 (Nesse caso ele entendeu apenas o primeiro número que foi 0 e ignorou o resto pq ele não sabe que é na base 16)
      - parseFloat("0b10"); -> 0 (Nesse caso ele entendeu apenas o primeiro número que foi 0 e ignorou o resto pq ele não sabe que é na base 2)

# IEEE 754
  - O IEEE 754 é um padrão de representação numérica criado em 1985 e adotado por diversas linguagens de programação como JavaScript, Ruby, Python e Java.
    - Ao realizar operações com números decimais, podem existir resíduos decorrentes de arredondamento
      - 0.1 + 0.2; -> 0.30000000000000004
      - 666.7 - 666.6; -> 0.10000000000002274
      - 33.3 * 3; -> 99.89999999999999
      - 12.2 / 0.1; -> 121.99999999999999
    - Para ver como as representações numéricas com mais clareza visitar o site IEEE 754 Calculator (https://weitz.de/ieee/)
    - Infinity, que pode ser positivo ou negativo, é retornado quando uma operação ultrapassa os limites do tipo number
      - 1 / 0;  -> Infinity
      - Math.pow(10, 1000);  -> Infinity
      - Number.MAX_VALUE * 2;  -> Infinity
      - -Number.MAX_VALUE * 2;  -> -Infinity
      - Math.log(0);  -> -Infinity
    - NaN, ou Not a Number, é retornado quando realizamos uma operação numérica onde não é possível determinar o resultado
      - 10 * 'JavaScript'; -> NaN
      - 0/0; -> NaN
      - Math.sqrt(-9); -> NaN
      - Math.log(-1); -> NaN
      - parseFloat('JavaScript'); -> NaN