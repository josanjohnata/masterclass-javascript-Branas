# Number

## O tipo Number é primitivo, imutável e é representado internamente pelo padrão IEEE 754 de 64 bits
 - O JavaScript suporta 4 sistemos de numeração decimal, hexadecimal, binário e octal.
  - O sistema de numeração decimal, de base 10, deve iniciar com um número de 1 a 9, seguido por
    números de 0 a 9 com ou sem ponto. indicando se é inteiro ou decimal.
  - O istema de numeração hexadecimal, de base 16, deve iniciar com 0x ou 0X, seguido por números
    de 0 a 9 e letras de A as F.
  - O sistema de numeração binário, de base 2, de iniciar com 0b ou 0B, seguido por números de 0 a 1.
  - O sistema de numeração octal, de base 8, deve iniciar com 0, 0o ou 0O seguido po números de 0 a 7.

  Ex.: 10 -> 10
       9.9 -> 9.9
       0xFF -> 255
       0b11 -> 3
       010 -> 8
       0X1A -> 26
       0o7 -> 7
       0o12 -> 10

## Também é possivél usar a função construtora do number (new Number()).
  - Quando se cria um número com a função construtora, esse número primitivo é encaixotato em um objeto
    para que ele tenha outras operações.

      Ex.: new Number (10) -> [Number: 10]
       new Number (9.9) -> [Number: 9.9]
       new Number (0xFF) -> [Number: 255]
       new Number (0b11) -> [Number: 3]
       new Number (010) -> [Number: 8]
       new Number (0X1A) -> [Number: 26]
       new Number (0o7) -> [Number: 7]
       new Number (0o12) -> [Number: 10]
  
  - Os métodos toExponential, toFixed e toPrecision podem ser utilizados para mudar a forma como um
    número é representado.
      Ex.: (123.4).toExponential(10) -> '1.2340000000e+2'
           (1234.5).toExponential(10) -> '1.2345000000e+3'
           (123.4).toFixed(10) -> '123.4000000000'
           (10).toFixed(2) -> '10,00'
           (123.4).toPrecision(10) -> '123,4000000'
