
# Classes
  - As classes são um tipo especial de função que atuam como um template para a criação de objetos
    Ex.:
      // forma padrão de cria um class
      class Square {

      };
      console.log(Square); -> [Function: Square]
      // outra forma de criar uma classe com o class expression
      const Square = class {

      };
      console.log(typeof Square); -> function
      // Para instanciar essa class em um objeto
      const square = new Square();
      console.log(square); -> Square {}
  - As classes não sofrem hoisting, não importando a forma como foram declaradas
    Ex.:
      const square = new Square();
      const Square = class {

      };
      console.log(square); -> Square is not defined
  - As classes são formadas por 3 tipos de membros: constructor, prototype methods e static methods
    - O constructor é invocado no momento da instanciação de uma classe e serve para inicializar um determinado objeto
      Ex.:
        class Square {
          constructor(side) {
            this.side = side;
          }
        };
        const square = new Square(4);
        console.log(square); -> Square { side: 4 }
    - Os prototype methods dependem de uma instância para serem invocados
      Ex.:
        class Square {
          constructor(side) {
            this.side = side;
          }

          calculateArea() {
            return Math.pow(this.side, 2);
          }

          toString() {
            return `side: ${this.side} area: ${this.calculateArea}`;
          }
        };
        const square = new Square(4);
        console.log(square.toString()); -> side: 4 area: 16
        console.log(square.calculateArea()); -> 16
    - Os static methods não dependem de uma instância para serem invocados
      Ex.:
        class Square {
          constructor(side) {
            this.side = side;
          }

          calculateArea() {
            return Math.pow(this.side, 2);
          }

          toString() {
            return `side: ${this.side} area: ${this.calculateArea}`;
          }

          static fromArea(area) {
            return new Square(Math.sqrt(area))
          }
        };
        const square = Square.fromArea(16);
        console.log(square.toString()); -> side: 4 area: 16
        console.log(square.calculateArea()); -> 16
    - As classes funcionam de form similar as funções construtoras
      Ex.:
        function Square(side) {
          this.side = side;
        };

        Square.prototype.calculateArea = function() {
          return Math.pow(this.side, 2);
        };

        Square.prototype.toString = function() {
          return `side: ${this.side} area: ${this.calculateArea}`;
        };

        Square.fromArea = function(area) {
          return new Square(Math.sqrt(area));
        };

        const square = Square.fromArea(16);
        console.log(square.toString()); -> side: 4 area: 16
        console.log(square.calculateArea()); -> 16
    - É possível criar uma hierarquia de classes por meio da palavra-chave extends
    - Ao declarar um construtor na subclass é necessário invocar o construtor da superclass por meio super() antes de utilizar a referência this
      Ex.:
        class Shape {
          toString() {
            return `area: ${this.calculateArea()}`;
          }
        };

        class Square {
          constructor(side) {
            super();
            this.side = side;
          }

          calculateArea() {
            return Math.pow(this.side, 2);
          }

          toString() {
            return `side: ${this.side} ${super.toString()}`;
          }

          static fromArea(area) {
            return new Square(Math.sqrt(area))
          }
        };
        const square = Square.fromArea(16);
        console.log(square.toString()); -> side: 4 area: 16
        console.log(square.calculateArea()); -> 16

        class Circle {
          constructor(radius) {
            super();
            this.radius = radius;
          }

          calculateArea() {
            return Math.PI * Math.pow(this.radius, 2);
          }

          toString() {
            return `radius: ${this.radius} ${super.toString()}`;
          }

          static fromArea(area) {
            return new Circle(Math.sqrt(area / Math.PI))
          }
        }
        const circle = new Circle.fromArea(314.1592653589793);
        console.log(circle.toString()); -> radius: 10 area: 314.1592653589793
        console.log(circle.calculateArea()); -> 314.1592653589793
